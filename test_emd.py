import numpy as np
import torch
import matplotlib.pyplot as plt
import matplotlib

from utilities import dt, cutoff_fastest, Stimulus, device
from motion_vision_networks import gen_test_emd
from sns_toolbox.renderer import render

#                   Retina          L1                                  L2                              L3                  Mi1         Mi9             Tm1             Tm9             CT1_On          CT1_Off
cutoffs = np.array([cutoff_fastest, cutoff_fastest/10, cutoff_fastest, cutoff_fastest/5, cutoff_fastest, cutoff_fastest, cutoff_fastest, cutoff_fastest, cutoff_fastest, cutoff_fastest, cutoff_fastest, cutoff_fastest])

def test_emd(model, net, stimulus, interval):
    model.reset()
    size = 7*7
    start = 3*7
    # render(net)

    stim = Stimulus(stimulus, interval)

    t = np.arange(0,500, dt)
    data = torch.zeros([len(t), net.get_num_outputs_actual()], device=device)

    for i in range(len(t)):
        data[i,:] = model(stim.get_stimulus())

    data = data.to('cpu')
    data = data.transpose(0,1)
    retina = data[:size, :]
    t4_a = data[size:2*size, :]
    t4_b = data[2*size:3*size, :]
    t4_c = data[3*size:4*size, :]
    t4_d = data[4*size:, :]

    retina_row = retina[start:start+7,:]
    t4_a_row = t4_a[start:start+7,:]
    t4_a_single = t4_a_row[3,:]
    t4_b_row = t4_b[start:start+7,:]
    t4_b_single = t4_b_row[3,:]
    t4_c_row = t4_c[start:start+7,:]
    t4_c_single = t4_c_row[3,:]
    t4_d_row = t4_d[start:start+7,:]
    t4_d_single = t4_d_row[3,:]

    plt.figure()
    plt.subplot(2,1,1)
    plt.title('Retina')
    for i in range(3):
        plt.plot(t, retina_row[i+2,:], color='C'+str(i+2))
    plt.subplot(2,1,2)
    plt.title('T4')
    plt.plot(t, t4_a_single, label='T4a')
    plt.plot(t, t4_b_single, label='T4b')
    plt.plot(t, t4_c_single, label='T4c')
    plt.plot(t, t4_d_single, label='T4d')
    plt.legend()

on_lr = torch.tensor([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
                      ], device=device)

# on_lr = on_lr.to('cpu').numpy()
on_rl = on_lr.flipud()

on_bt = torch.tensor([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                      [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
                      ], device=device)
on_tb = on_bt.fliplr()
# on_bt = on_bt.to('cpu').numpy()
model, net = gen_test_emd((7,7))

test_emd(model, net, on_rl, 10)
test_emd(model, net, on_lr, 10)
test_emd(model, net, on_bt, 10)
test_emd(model, net, on_tb, 10)

plt.show()